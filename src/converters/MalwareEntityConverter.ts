import { EntityFromIntegration } from "@jupiterone/jupiter-managed-integration-sdk";
import { entities } from "../constants";
import { ContainerMalware, Dictionary } from "../tenable/types";
import { generateEntityKey } from "../utils/generateKey";

interface ContainerMalwareEntity extends EntityFromIntegration {
  infectedFile: string;
  fileTypeDescriptor: string;
  md5: string;
  sha256: string;
}

export function createMalwareEntities(
  data: Dictionary<ContainerMalware[]>,
): ContainerMalwareEntity[] {
  const defaultValue: ContainerMalwareEntity[] = [];
  const vulnerabilityArrays = Object.values(data);

  const relationships = vulnerabilityArrays.reduce(
    (acc: ContainerMalwareEntity[], array) => {
      const relationsForOneReport: ContainerMalwareEntity[] = array.map(
        createMalwareEntity,
      );
      return acc.concat(relationsForOneReport);
    },
    defaultValue,
  );

  return relationships;
}

function createMalwareEntity(
  vulnerability: ContainerMalware,
): ContainerMalwareEntity {
  const malwareId = vulnerability.md5;
  return {
    _key: generateEntityKey(entities.CONTAINER_MALWARE._type, malwareId),
    _type: entities.CONTAINER_MALWARE._type,
    _class: entities.CONTAINER_MALWARE._class,
    _rawData: [{ name: "default", rawData: vulnerability }],
    infectedFile: vulnerability.infectedFile,
    fileTypeDescriptor: vulnerability.fileTypeDescriptor,
    md5: vulnerability.md5,
    sha256: vulnerability.sha256,
  };
}
