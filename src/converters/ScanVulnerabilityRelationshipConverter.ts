import {
  SCAN_ENTITY_TYPE,
  SCAN_VULNERABILITY_ENTITY_TYPE,
  SCAN_VULNERABILITY_RELATIONSHIP_CLASS,
  SCAN_VULNERABILITY_RELATIONSHIP_TYPE,
  ScanVulnerabilityRelationship,
} from "../jupiterone/entities";
import { Dictionary, Scan, ScanVulnerability } from "../tenable/types";
import {
  generateEntityKey,
  generateRelationshipKey,
} from "../utils/generateKey";

export function createScanVulnerabilityRelationships(
  scans: Scan[],
  scanVulnerabilitiesDictionary: Dictionary<ScanVulnerability[]>,
): ScanVulnerabilityRelationship[] {
  const defaultValue: ScanVulnerabilityRelationship[] = [];

  const vulnerabilityArrays: ScanVulnerability[][] = Object.values(
    scanVulnerabilitiesDictionary,
  );
  const vulnerabilityArray: ScanVulnerability[] = vulnerabilityArrays.reduce(
    (acc, item) => acc.concat(item),
    [],
  );

  const relationships: ScanVulnerabilityRelationship[] = scans.reduce(
    (acc, scan) => {
      const vulnerabilities = vulnerabilityArray.filter(
        value => value.scan_id === scan.id,
      );

      const relationshipsForOneScan: ScanVulnerabilityRelationship[] = vulnerabilities.map(
        item => {
          const parentKey = generateEntityKey(SCAN_ENTITY_TYPE, scan.id);
          const childKey = generateEntityKey(
            SCAN_VULNERABILITY_ENTITY_TYPE,
            `${item.plugin_id}_${item.host_id}_${item.scan_id}`,
          );
          const relationKey = generateRelationshipKey(
            parentKey,
            SCAN_VULNERABILITY_RELATIONSHIP_CLASS,
            childKey,
          );

          const relationship: ScanVulnerabilityRelationship = {
            _class: SCAN_VULNERABILITY_RELATIONSHIP_CLASS,
            _type: SCAN_VULNERABILITY_RELATIONSHIP_TYPE,
            _fromEntityKey: parentKey,
            _key: relationKey,
            _toEntityKey: childKey,
          };
          return relationship;
        },
      );

      return acc.concat(relationshipsForOneScan);
    },
    defaultValue,
  );

  return relationships;
}
