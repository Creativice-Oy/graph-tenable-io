import {
  SCAN_VULNERABILITY_ENTITY_CLASS,
  SCAN_VULNERABILITY_ENTITY_TYPE,
  ScanVulnerabilityEntity,
} from "../jupiterone/entities";
import { Dictionary, ScanVulnerability } from "../tenable/types";
import { generateEntityKey } from "../utils/generateKey";

export function createVulnerabilityEntities(
  vulnerabilitiesDic: Dictionary<ScanVulnerability[]>,
): ScanVulnerabilityEntity[] {
  const defaultValue: ScanVulnerabilityEntity[] = [];
  const vulnerabilityArrays: ScanVulnerability[][] = Object.values(
    vulnerabilitiesDic,
  );

  const vulnerabilityEntities = vulnerabilityArrays.reduce(
    (acc: ScanVulnerabilityEntity[], data: ScanVulnerability[]) => {
      const vulnerabilities: ScanVulnerabilityEntity[] = data.map(
        mapToVulnerabilityEntity,
      );

      return acc.concat(vulnerabilities);
    },
    defaultValue,
  );

  return vulnerabilityEntities;
}

function mapToVulnerabilityEntity(
  item: ScanVulnerability,
): ScanVulnerabilityEntity {
  const vulnerabilityEntity: ScanVulnerabilityEntity = {
    _key: generateEntityKey(
      SCAN_VULNERABILITY_ENTITY_TYPE,
      `${item.plugin_id}_${item.host_id}_${item.scan_id}`,
    ),
    _type: SCAN_VULNERABILITY_ENTITY_TYPE,
    _class: SCAN_VULNERABILITY_ENTITY_CLASS,
    pluginId: item.plugin_id,
    pluginFamily: item.plugin_family,
    pluginName: item.plugin_name,
    count: item.count,
    severity: item.severity,
    hostId: item.host_id,
    hostName: item.hostname,
    scanId: item.scan_id as number,
  };

  return vulnerabilityEntity;
}
