import {
  APPLICATION_ENTITY_TYPE,
  APPLICATION_HAS_VULNERABILITY_RELATIONSHIP_CLASS,
  APPLICATION_HAS_VULNERABILITY_RELATIONSHIP_TYPE,
  ApplicationVulnerabilityRelationship,
  VULNERABILITY_ENTITY_TYPE,
} from "../jupiterone/entities";

import { Asset, Dictionary, Vulnerability } from "../tenable";
import generateKey from "../utils/generateKey";

const defaultValue: ApplicationVulnerabilityRelationship[] = [];

export function createApplicationVulnerabilityRelationships(
  assets: Asset[],
  vulnerabilitiesDictionary: Dictionary<Vulnerability[]>,
): ApplicationVulnerabilityRelationship[] {
  const relationships: ApplicationVulnerabilityRelationship[] = assets.reduce(
    (acc, asset) => {
      const relationshipsForOneApplication = createRelationshipsForOneApplication(
        asset,
        vulnerabilitiesDictionary,
      );

      return acc.concat(relationshipsForOneApplication);
    },
    defaultValue,
  );

  return relationships;
}

function createRelationshipsForOneApplication(
  asset: Asset,
  vulnerabilitiesDictionary: Dictionary<Vulnerability[]>,
) {
  return asset.fqdn.reduce((acc, item) => {
    const vulnerabilities = vulnerabilitiesDictionary[item];

    if (!vulnerabilities || vulnerabilities.length === 0) {
      return acc;
    }

    const relationshipsForOneFqdn = createRelationshipsForOneHostname(
      vulnerabilities,
      asset.id,
    );

    return acc.concat(relationshipsForOneFqdn);
  }, defaultValue);
}

function createRelationshipsForOneHostname(
  vulnerabilities: Vulnerability[],
  assetId: string,
): ApplicationVulnerabilityRelationship[] {
  const relationships: ApplicationVulnerabilityRelationship[] = vulnerabilities.map(
    item => {
      const parentKey = generateKey(APPLICATION_ENTITY_TYPE, assetId);
      const childKey = generateKey(VULNERABILITY_ENTITY_TYPE, item.plugin_id);
      const relationship: ApplicationVulnerabilityRelationship = {
        _class: APPLICATION_HAS_VULNERABILITY_RELATIONSHIP_CLASS,
        _type: APPLICATION_HAS_VULNERABILITY_RELATIONSHIP_TYPE,
        _fromEntityKey: parentKey,
        _key: `${parentKey}_has_${childKey}`,
        _toEntityKey: childKey,
      };

      return relationship;
    },
  );

  return relationships;
}
