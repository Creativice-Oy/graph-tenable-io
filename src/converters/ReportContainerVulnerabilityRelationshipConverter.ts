import {
  CONTAINER_VULNERABILITY_ENTITY_TYPE,
  REPORT_CONTAINER_VULNERABILITY_RELATIONSHIP_CLASS,
  REPORT_CONTAINER_VULNERABILITY_RELATIONSHIP_TYPE,
  REPORT_ENTITY_TYPE,
  ReportContainerVulnerabilityRelationship,
} from "../jupiterone/entities";
import {
  ContainerVulnerability,
  Dictionary,
  Finding,
  Malware,
  PotentiallyUnwantedProgram,
  Report,
} from "../types";
import {
  generateEntityKey,
  generateRelationshipKey,
} from "../utils/generateKey";

export function createReportContainerVulnerabilityRelationships(
  reports: Report[],
  containerVulnerabilities: Dictionary<ContainerVulnerability[]>,
): ReportContainerVulnerabilityRelationship[] {
  const defaultValue: ReportContainerVulnerabilityRelationship[] = [];
  const relationships = reports.reduce((acc, report) => {
    const vulnerabilitiesForReport = containerVulnerabilities[report.sha256];
    const relationsForReport = createRelationshipsForReport(
      vulnerabilitiesForReport,
      report.sha256,
    );
    return acc.concat(relationsForReport);
  }, defaultValue);
  return relationships;
}

function createRelationshipsForReport(
  vulnerabilities: ContainerVulnerability[],
  reportId: string,
): ReportContainerVulnerabilityRelationship[] {
  const parentKey = generateEntityKey(REPORT_ENTITY_TYPE, reportId);
  const relations = vulnerabilities.map(item => {
    if (isMalware(item)) {
      return createRelationWithMalware(item, parentKey);
    }
    if (isFinding(item)) {
      return createRelationWithFinding(item, parentKey);
    }
    return createRelationWithUnwantedProgram(item, parentKey);
  });
  return relations;
}

function createRelationWithMalware(
  vulnerability: Malware,
  parentKey: string,
): ReportContainerVulnerabilityRelationship {
  const malwareId = vulnerability.md5;
  const childKey = generateEntityKey(
    CONTAINER_VULNERABILITY_ENTITY_TYPE,
    malwareId,
  );
  return createReportContainerVulnerabilityRelation(parentKey, childKey);
}

function createRelationWithFinding(
  vulnerability: Finding,
  parentKey: string,
): ReportContainerVulnerabilityRelationship {
  const findingId = vulnerability.nvdFinding.reference_id;
  const childKey = generateEntityKey(
    CONTAINER_VULNERABILITY_ENTITY_TYPE,
    findingId,
  );
  return createReportContainerVulnerabilityRelation(parentKey, childKey);
}

function createRelationWithUnwantedProgram(
  vulnerability: PotentiallyUnwantedProgram,
  parentKey: string,
): ReportContainerVulnerabilityRelationship {
  const unwantedProgramId = vulnerability.md5;
  const childKey = generateEntityKey(
    CONTAINER_VULNERABILITY_ENTITY_TYPE,
    unwantedProgramId,
  );
  return createReportContainerVulnerabilityRelation(parentKey, childKey);
}

function createReportContainerVulnerabilityRelation(
  parentKey: string,
  childKey: string,
): ReportContainerVulnerabilityRelationship {
  const relationKey = generateRelationshipKey(
    parentKey,
    REPORT_CONTAINER_VULNERABILITY_RELATIONSHIP_CLASS,
    childKey,
  );

  return {
    _class: REPORT_CONTAINER_VULNERABILITY_RELATIONSHIP_CLASS,
    _type: REPORT_CONTAINER_VULNERABILITY_RELATIONSHIP_TYPE,
    _fromEntityKey: parentKey,
    _key: relationKey,
    _toEntityKey: childKey,
  };
}

function isMalware(object: ContainerVulnerability): object is Malware {
  return "infectedFile" in object;
}

function isFinding(object: ContainerVulnerability): object is Finding {
  return "nvdFinding" in object;
}
