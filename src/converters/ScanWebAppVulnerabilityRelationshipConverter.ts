import {
  SCAN_ENTITY_TYPE,
  SCAN_HAS_WEBAPP_VULNERABILITY_RELATIONSHIP_CLASS,
  SCAN_HAS_WEBAPP_VULNERABILITY_RELATIONSHIP_TYPE,
  ScanWebAppVulnerabilityRelationship,
  WEBAPP_VULNERABILITY_ENTITY_TYPE,
} from "../jupiterone/entities";
import { Scan } from "../types";
import {
  generateEntityKey,
  generateRelationshipKey,
} from "../utils/generateKey";

export function createScanWebAppVulnerabilityRelationships(
  scans: Scan[],
): ScanWebAppVulnerabilityRelationship[] {
  const defaultValue: ScanWebAppVulnerabilityRelationship[] = [];

  const relationships: ScanWebAppVulnerabilityRelationship[] = scans.reduce(
    (acc, scan) => {
      if (!scan.scanDetail) {
        return acc;
      }

      const relationshipsForOneScan: ScanWebAppVulnerabilityRelationship[] = scan.scanDetail.vulnerabilities.map(
        item => {
          const parentKey = generateEntityKey(SCAN_ENTITY_TYPE, scan.id);
          const childKey = generateEntityKey(
            WEBAPP_VULNERABILITY_ENTITY_TYPE,
            item.plugin_id,
          );
          const relationKey = generateRelationshipKey(
            parentKey,
            SCAN_HAS_WEBAPP_VULNERABILITY_RELATIONSHIP_CLASS,
            childKey,
          );

          const relationship: ScanWebAppVulnerabilityRelationship = {
            _class: SCAN_HAS_WEBAPP_VULNERABILITY_RELATIONSHIP_CLASS,
            _type: SCAN_HAS_WEBAPP_VULNERABILITY_RELATIONSHIP_TYPE,
            _fromEntityKey: parentKey,
            _key: relationKey,
            _toEntityKey: childKey,
          };
          return relationship;
        },
      );

      return acc.concat(relationshipsForOneScan);
    },
    defaultValue,
  );

  return relationships;
}
