import {
  CONTAINER_VULNERABILITY_ENTITY_CLASS,
  CONTAINER_VULNERABILITY_ENTITY_TYPE,
  ContainerVulnerabilityEntity,
  FindingVulnerabilityEntity,
  MalwareVulnerabilityEntity,
  PotentiallyUnwantedProgramVulnerabilityEntity,
} from "../jupiterone/entities";
import {
  ContainerVulnerability,
  Dictionary,
  Finding,
  Malware,
  PotentiallyUnwantedProgram,
} from "../types";
import { generateEntityKey } from "../utils/generateKey";

export function createContainerVulnerabilityEntities(
  data: Dictionary<ContainerVulnerability[]>,
): ContainerVulnerabilityEntity[] {
  const defaultValue: ContainerVulnerabilityEntity[] = [];
  const vulnerabilityArrays = Object.values(data);

  const relationships = vulnerabilityArrays.reduce((acc, array) => {
    const relationsForOneReport: ContainerVulnerabilityEntity[] = array.map(
      mapToEntity,
    );
    return acc.concat(relationsForOneReport);
  }, defaultValue);

  return relationships;
}

function mapToEntity(
  vulnerability: ContainerVulnerability,
): ContainerVulnerabilityEntity {
  if (isMalware(vulnerability)) {
    return createMalwareEntity(vulnerability);
  }
  if (isFinding(vulnerability)) {
    return createFindingEntity(vulnerability);
  }
  return createUnwantedProgramEntity(vulnerability);
}

function createMalwareEntity(
  vulnerability: Malware,
): MalwareVulnerabilityEntity {
  const malwareId = vulnerability.md5;
  return {
    _key: generateEntityKey(CONTAINER_VULNERABILITY_ENTITY_TYPE, malwareId),
    _type: CONTAINER_VULNERABILITY_ENTITY_TYPE,
    _class: CONTAINER_VULNERABILITY_ENTITY_CLASS,
    infectedFile: vulnerability.infectedFile,
    fileTypeDescriptor: vulnerability.fileTypeDescriptor,
    md5: vulnerability.md5,
    sha256: vulnerability.sha256,
  };
}

function createFindingEntity(
  vulnerability: Finding,
): FindingVulnerabilityEntity {
  const { nvdFinding } = vulnerability;
  const findingId = nvdFinding.reference_id;
  return {
    _key: generateEntityKey(CONTAINER_VULNERABILITY_ENTITY_TYPE, findingId),
    _type: CONTAINER_VULNERABILITY_ENTITY_TYPE,
    _class: CONTAINER_VULNERABILITY_ENTITY_CLASS,
    referenceId: nvdFinding.reference_id,
    cve: nvdFinding.cve,
    publishedDate: nvdFinding.published_date,
    modifiedDate: nvdFinding.modified_date,
    description: nvdFinding.description,
    cvssScore: nvdFinding.cvss_score,
    accessVector: nvdFinding.access_vector,
    accessComplexity: nvdFinding.access_complexity,
    auth: nvdFinding.auth,
    availabilityImpact: nvdFinding.availability_impact,
    confidentialityImpact: nvdFinding.confidentiality_impact,
    integrityImpact: nvdFinding.integrity_impact,
    cwe: nvdFinding.cwe,
    remediation: nvdFinding.remediation,
  };
}

function createUnwantedProgramEntity(
  vulnerability: PotentiallyUnwantedProgram,
): PotentiallyUnwantedProgramVulnerabilityEntity {
  const unwantedProgramId = vulnerability.md5;
  return {
    _key: generateEntityKey(
      CONTAINER_VULNERABILITY_ENTITY_TYPE,
      unwantedProgramId,
    ),
    _type: CONTAINER_VULNERABILITY_ENTITY_TYPE,
    _class: CONTAINER_VULNERABILITY_ENTITY_CLASS,
    file: vulnerability.file,
    md5: vulnerability.md5,
    sha256: vulnerability.sha256,
  };
}

function isMalware(object: ContainerVulnerability): object is Malware {
  return "infectedFile" in object;
}

function isFinding(object: ContainerVulnerability): object is Finding {
  return "nvdFinding" in object;
}
